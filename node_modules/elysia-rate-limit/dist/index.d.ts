import Elysia$1, { Cookie, Elysia, MaybePromise } from "elysia";
import * as _sinclair_typebox0 from "@sinclair/typebox";

//#region src/@types/Context.d.ts
interface Context {
  init(options: Omit<Options, 'context'>): void;
  increment(key: string): MaybePromise<{
    count: number;
    nextReset: Date;
  }>;
  decrement(key: string): MaybePromise<void>;
  reset(key?: string): MaybePromise<void>;
  kill(): MaybePromise<void>;
}

//#endregion
//#region src/@types/Server.d.ts
type Server = Elysia['server'];

//#endregion
//#region src/@types/Generator.d.ts
type Generator<T extends object = {}> = (request: Request & {
  cookie: Record<string, Cookie<string>>;
}, server: Server | null, derived: T) => MaybePromise<string>;

//#endregion
//#region src/@types/Options.d.ts
interface Options {
  duration: number;
  max: number;
  errorResponse: string | Response | Error;
  scoping: 'global' | 'scoped';
  countFailedRequest: boolean;
  generator: Generator<any>;
  context: Context;
  skip: (req: Request & {
    cookie: Record<string, Cookie<string>>;
  }, key?: string) => boolean | Promise<boolean>;
  injectServer?: () => Server | null;
  headers: boolean;
}

//#endregion
//#region src/services/plugin.d.ts
declare const plugin: (userOptions?: Partial<Options>) => (app: Elysia$1) => Elysia$1<"", {
  decorator: {};
  store: {};
  derive: {};
  resolve: {};
}, {
  error: {};
  typebox: _sinclair_typebox0.TModule<{}, {}>;
}, {
  schema: {};
  macro: {};
  macroFn: {};
  parser: {};
}, {}, {
  derive: {};
  resolve: {};
  schema: {};
}, {
  derive: {};
  resolve: {};
  schema: {};
}>;

//#endregion
//#region src/services/defaultContext.d.ts
interface Item {
  count: number;
  nextReset: Date;
}
declare class DefaultContext implements Context {
  private readonly id;
  private readonly maxSize;
  private store;
  private duration;
  constructor(maxSize?: number);
  init(options: Omit<Options, 'context'>): void;
  increment(key: string): Promise<Item>;
  decrement(key: string): Promise<void>;
  reset(key?: string): Promise<void>;
  kill(): void;
}

//#endregion
//#region src/constants/defaultOptions.d.ts
declare const defaultOptions: Omit<Options, 'context'>;

//#endregion
export { Context, DefaultContext, Generator, Options, defaultOptions, plugin as rateLimit };
//# sourceMappingURL=index.d.ts.map